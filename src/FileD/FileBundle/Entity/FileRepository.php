<?php

namespace FileD\FileBundle\Entity;

use FileD\FileBundle\Factory\FileFactory;

use Doctrine\ORM\EntityRepository;

/**
 * FileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 * @author epidoux <eric.pidoux@gmail.com>
 * @version 1.0
 */
class FileRepository extends EntityRepository
{


	/**
	 * Find file by path
	 * @param $path the path to match
	 * @return the entity id
	 */
	public function findIdByPath($path)
	{
		$result = $this->_em->createQuery('
		        SELECT
		            f.id
		        FROM
		            FileDFileBundle:File f
		        WHERE
		            f.link = :link
		    ')
			    ->setParameter('link', $path)
				->getResult();
		$id = null;
		if(count($result) > 0)
		{
			$id=$result[0]['id'];
		}
		return $id;
	}
	
	/**
	 * Find file by hash
	 * @param string the hash
	 * @return the entity
	 */
	public function findByHash($hash)
	{

		$result = $this->_em->createQuery('
		        SELECT
		            f
		        FROM
		            FileDFileBundle:File f
		        WHERE
		            f.hash = :hash
		    ')
				    ->setParameter('hash', $hash)
				    ->getResult();
		return $result[0];
	}

	/**
	 * Find files which have the given user shared and the given parent file
	 * @param User the user
	 * @param File the parent file
	 * @param boolean define if the directories are included
	 * @return the files
	 */
	public function findFilesShared($user,$parent,$includeDir)
	{
	    $query ="SELECT
		            f
		        FROM FileDFileBundle:File f
				JOIN f.usersShare u 
				WHERE u.id = :id
		        ";
	    if($parent!=null)$query.=" AND f.parent=:parent";
	    if(!$includeDir)$query.=" AND f.mime <> :mime";
	    $query.=" ORDER BY f.name ASC";
		$query = $this->_em->createQuery($query)
				    ->setParameter('id', $user->getId());
		if($parent!=null)$query->setParameter('parent', $parent);
		if(!$includeDir)$query->setParameter('mime',FileFactory::getInstance()->getMimeType('dir'));
				    
		return $query->getResult();
	}
}
